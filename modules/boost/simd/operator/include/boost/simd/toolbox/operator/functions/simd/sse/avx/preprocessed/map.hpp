namespace boost { namespace simd { namespace ext { BOOST_SIMD_FUNCTOR_IMPLEMENTATION ( map_, boost::simd::tag::avx_ , (Func)(A0) , (unspecified_<Func>) ((simd_< double_ <A0>, boost::simd::tag::avx_ >)) ) { typedef typename dispatch::meta:: result_of< Func const( simd::native<typename meta::scalar_of<A0>::type, tag::sse_> )>::type base; typedef simd::native< typename meta::scalar_of<base>::type , boost::simd::tag::avx_> result_type; inline result_type operator()( Func const& f , BOOST_PP_ENUM_BINARY_PARAMS( 1, A, const& a) ) const { base r0,r1; result_type that; native<typename meta::scalar_of<A0>::type,tag::sse_> a00,a10; a00 = _mm256_extractf128_pd(a0,0); a10 = _mm256_extractf128_pd(a0,1); r0 = f(a00 ); r1 = f(a10 ); that = _mm256_insertf128_pd (that(),r0(),0); that = _mm256_insertf128_pd (that(),r1(),1); return that; } }; } } } namespace boost { namespace simd { namespace ext { BOOST_SIMD_FUNCTOR_IMPLEMENTATION ( map_, boost::simd::tag::avx_ , (Func)(A0) (A1) , (unspecified_<Func>) ((simd_< double_ <A0>, boost::simd::tag::avx_ >)) ((simd_< double_ <A1>, boost::simd::tag::avx_ >)) ) { typedef typename dispatch::meta:: result_of< Func const( simd::native<typename meta::scalar_of<A0>::type, tag::sse_> , simd::native<typename meta::scalar_of<A1>::type, tag::sse_> )>::type base; typedef simd::native< typename meta::scalar_of<base>::type , boost::simd::tag::avx_> result_type; inline result_type operator()( Func const& f , BOOST_PP_ENUM_BINARY_PARAMS( 2, A, const& a) ) const { base r0,r1; result_type that; native<typename meta::scalar_of<A0>::type,tag::sse_> a00,a10; native<typename meta::scalar_of<A1>::type,tag::sse_> a01,a11; a00 = _mm256_extractf128_pd(a0,0); a10 = _mm256_extractf128_pd(a0,1); a01 = _mm256_extractf128_pd(a1,0); a11 = _mm256_extractf128_pd(a1,1); r0 = f(a00 , a01 ); r1 = f(a10 , a11 ); that = _mm256_insertf128_pd (that(),r0(),0); that = _mm256_insertf128_pd (that(),r1(),1); return that; } }; } } } namespace boost { namespace simd { namespace ext { BOOST_SIMD_FUNCTOR_IMPLEMENTATION ( map_, boost::simd::tag::avx_ , (Func)(A0) (A1) (A2) , (unspecified_<Func>) ((simd_< double_ <A0>, boost::simd::tag::avx_ >)) ((simd_< double_ <A1>, boost::simd::tag::avx_ >)) ((simd_< double_ <A2>, boost::simd::tag::avx_ >)) ) { typedef typename dispatch::meta:: result_of< Func const( simd::native<typename meta::scalar_of<A0>::type, tag::sse_> , simd::native<typename meta::scalar_of<A1>::type, tag::sse_> , simd::native<typename meta::scalar_of<A2>::type, tag::sse_> )>::type base; typedef simd::native< typename meta::scalar_of<base>::type , boost::simd::tag::avx_> result_type; inline result_type operator()( Func const& f , BOOST_PP_ENUM_BINARY_PARAMS( 3, A, const& a) ) const { base r0,r1; result_type that; native<typename meta::scalar_of<A0>::type,tag::sse_> a00,a10; native<typename meta::scalar_of<A1>::type,tag::sse_> a01,a11; native<typename meta::scalar_of<A2>::type,tag::sse_> a02,a12; a00 = _mm256_extractf128_pd(a0,0); a10 = _mm256_extractf128_pd(a0,1); a01 = _mm256_extractf128_pd(a1,0); a11 = _mm256_extractf128_pd(a1,1); a02 = _mm256_extractf128_pd(a2,0); a12 = _mm256_extractf128_pd(a2,1); r0 = f(a00 , a01 , a02 ); r1 = f(a10 , a11 , a12 ); that = _mm256_insertf128_pd (that(),r0(),0); that = _mm256_insertf128_pd (that(),r1(),1); return that; } }; } } } namespace boost { namespace simd { namespace ext { BOOST_SIMD_FUNCTOR_IMPLEMENTATION ( map_, boost::simd::tag::avx_ , (Func)(A0) (A1) (A2) (A3) , (unspecified_<Func>) ((simd_< double_ <A0>, boost::simd::tag::avx_ >)) ((simd_< double_ <A1>, boost::simd::tag::avx_ >)) ((simd_< double_ <A2>, boost::simd::tag::avx_ >)) ((simd_< double_ <A3>, boost::simd::tag::avx_ >)) ) { typedef typename dispatch::meta:: result_of< Func const( simd::native<typename meta::scalar_of<A0>::type, tag::sse_> , simd::native<typename meta::scalar_of<A1>::type, tag::sse_> , simd::native<typename meta::scalar_of<A2>::type, tag::sse_> , simd::native<typename meta::scalar_of<A3>::type, tag::sse_> )>::type base; typedef simd::native< typename meta::scalar_of<base>::type , boost::simd::tag::avx_> result_type; inline result_type operator()( Func const& f , BOOST_PP_ENUM_BINARY_PARAMS( 4, A, const& a) ) const { base r0,r1; result_type that; native<typename meta::scalar_of<A0>::type,tag::sse_> a00,a10; native<typename meta::scalar_of<A1>::type,tag::sse_> a01,a11; native<typename meta::scalar_of<A2>::type,tag::sse_> a02,a12; native<typename meta::scalar_of<A3>::type,tag::sse_> a03,a13; a00 = _mm256_extractf128_pd(a0,0); a10 = _mm256_extractf128_pd(a0,1); a01 = _mm256_extractf128_pd(a1,0); a11 = _mm256_extractf128_pd(a1,1); a02 = _mm256_extractf128_pd(a2,0); a12 = _mm256_extractf128_pd(a2,1); a03 = _mm256_extractf128_pd(a3,0); a13 = _mm256_extractf128_pd(a3,1); r0 = f(a00 , a01 , a02 , a03 ); r1 = f(a10 , a11 , a12 , a13 ); that = _mm256_insertf128_pd (that(),r0(),0); that = _mm256_insertf128_pd (that(),r1(),1); return that; } }; } } } namespace boost { namespace simd { namespace ext { BOOST_SIMD_FUNCTOR_IMPLEMENTATION ( map_, boost::simd::tag::avx_ , (Func)(A0) (A1) (A2) (A3) (A4) , (unspecified_<Func>) ((simd_< double_ <A0>, boost::simd::tag::avx_ >)) ((simd_< double_ <A1>, boost::simd::tag::avx_ >)) ((simd_< double_ <A2>, boost::simd::tag::avx_ >)) ((simd_< double_ <A3>, boost::simd::tag::avx_ >)) ((simd_< double_ <A4>, boost::simd::tag::avx_ >)) ) { typedef typename dispatch::meta:: result_of< Func const( simd::native<typename meta::scalar_of<A0>::type, tag::sse_> , simd::native<typename meta::scalar_of<A1>::type, tag::sse_> , simd::native<typename meta::scalar_of<A2>::type, tag::sse_> , simd::native<typename meta::scalar_of<A3>::type, tag::sse_> , simd::native<typename meta::scalar_of<A4>::type, tag::sse_> )>::type base; typedef simd::native< typename meta::scalar_of<base>::type , boost::simd::tag::avx_> result_type; inline result_type operator()( Func const& f , BOOST_PP_ENUM_BINARY_PARAMS( 5, A, const& a) ) const { base r0,r1; result_type that; native<typename meta::scalar_of<A0>::type,tag::sse_> a00,a10; native<typename meta::scalar_of<A1>::type,tag::sse_> a01,a11; native<typename meta::scalar_of<A2>::type,tag::sse_> a02,a12; native<typename meta::scalar_of<A3>::type,tag::sse_> a03,a13; native<typename meta::scalar_of<A4>::type,tag::sse_> a04,a14; a00 = _mm256_extractf128_pd(a0,0); a10 = _mm256_extractf128_pd(a0,1); a01 = _mm256_extractf128_pd(a1,0); a11 = _mm256_extractf128_pd(a1,1); a02 = _mm256_extractf128_pd(a2,0); a12 = _mm256_extractf128_pd(a2,1); a03 = _mm256_extractf128_pd(a3,0); a13 = _mm256_extractf128_pd(a3,1); a04 = _mm256_extractf128_pd(a4,0); a14 = _mm256_extractf128_pd(a4,1); r0 = f(a00 , a01 , a02 , a03 , a04 ); r1 = f(a10 , a11 , a12 , a13 , a14 ); that = _mm256_insertf128_pd (that(),r0(),0); that = _mm256_insertf128_pd (that(),r1(),1); return that; } }; } } } namespace boost { namespace simd { namespace ext { BOOST_SIMD_FUNCTOR_IMPLEMENTATION ( map_, boost::simd::tag::avx_ , (Func)(A0) (A1) (A2) (A3) (A4) (A5) , (unspecified_<Func>) ((simd_< double_ <A0>, boost::simd::tag::avx_ >)) ((simd_< double_ <A1>, boost::simd::tag::avx_ >)) ((simd_< double_ <A2>, boost::simd::tag::avx_ >)) ((simd_< double_ <A3>, boost::simd::tag::avx_ >)) ((simd_< double_ <A4>, boost::simd::tag::avx_ >)) ((simd_< double_ <A5>, boost::simd::tag::avx_ >)) ) { typedef typename dispatch::meta:: result_of< Func const( simd::native<typename meta::scalar_of<A0>::type, tag::sse_> , simd::native<typename meta::scalar_of<A1>::type, tag::sse_> , simd::native<typename meta::scalar_of<A2>::type, tag::sse_> , simd::native<typename meta::scalar_of<A3>::type, tag::sse_> , simd::native<typename meta::scalar_of<A4>::type, tag::sse_> , simd::native<typename meta::scalar_of<A5>::type, tag::sse_> )>::type base; typedef simd::native< typename meta::scalar_of<base>::type , boost::simd::tag::avx_> result_type; inline result_type operator()( Func const& f , BOOST_PP_ENUM_BINARY_PARAMS( 6, A, const& a) ) const { base r0,r1; result_type that; native<typename meta::scalar_of<A0>::type,tag::sse_> a00,a10; native<typename meta::scalar_of<A1>::type,tag::sse_> a01,a11; native<typename meta::scalar_of<A2>::type,tag::sse_> a02,a12; native<typename meta::scalar_of<A3>::type,tag::sse_> a03,a13; native<typename meta::scalar_of<A4>::type,tag::sse_> a04,a14; native<typename meta::scalar_of<A5>::type,tag::sse_> a05,a15; a00 = _mm256_extractf128_pd(a0,0); a10 = _mm256_extractf128_pd(a0,1); a01 = _mm256_extractf128_pd(a1,0); a11 = _mm256_extractf128_pd(a1,1); a02 = _mm256_extractf128_pd(a2,0); a12 = _mm256_extractf128_pd(a2,1); a03 = _mm256_extractf128_pd(a3,0); a13 = _mm256_extractf128_pd(a3,1); a04 = _mm256_extractf128_pd(a4,0); a14 = _mm256_extractf128_pd(a4,1); a05 = _mm256_extractf128_pd(a5,0); a15 = _mm256_extractf128_pd(a5,1); r0 = f(a00 , a01 , a02 , a03 , a04 , a05 ); r1 = f(a10 , a11 , a12 , a13 , a14 , a15 ); that = _mm256_insertf128_pd (that(),r0(),0); that = _mm256_insertf128_pd (that(),r1(),1); return that; } }; } } }
namespace boost { namespace simd { namespace ext { BOOST_SIMD_FUNCTOR_IMPLEMENTATION ( map_, boost::simd::tag::avx_ , (Func)(A0) , (unspecified_<Func>) ((simd_< single_ <A0>, boost::simd::tag::avx_ >)) ) { typedef typename dispatch::meta:: result_of< Func const( simd::native<typename meta::scalar_of<A0>::type, tag::sse_> )>::type base; typedef simd::native< typename meta::scalar_of<base>::type , boost::simd::tag::avx_> result_type; inline result_type operator()( Func const& f , BOOST_PP_ENUM_BINARY_PARAMS( 1, A, const& a) ) const { base r0,r1; result_type that; native<typename meta::scalar_of<A0>::type,tag::sse_> a00,a10; a00 = _mm256_extractf128_ps(a0,0); a10 = _mm256_extractf128_ps(a0,1); r0 = f(a00 ); r1 = f(a10 ); that = _mm256_insertf128_ps (that(),r0(),0); that = _mm256_insertf128_ps (that(),r1(),1); return that; } }; } } } namespace boost { namespace simd { namespace ext { BOOST_SIMD_FUNCTOR_IMPLEMENTATION ( map_, boost::simd::tag::avx_ , (Func)(A0) (A1) , (unspecified_<Func>) ((simd_< single_ <A0>, boost::simd::tag::avx_ >)) ((simd_< single_ <A1>, boost::simd::tag::avx_ >)) ) { typedef typename dispatch::meta:: result_of< Func const( simd::native<typename meta::scalar_of<A0>::type, tag::sse_> , simd::native<typename meta::scalar_of<A1>::type, tag::sse_> )>::type base; typedef simd::native< typename meta::scalar_of<base>::type , boost::simd::tag::avx_> result_type; inline result_type operator()( Func const& f , BOOST_PP_ENUM_BINARY_PARAMS( 2, A, const& a) ) const { base r0,r1; result_type that; native<typename meta::scalar_of<A0>::type,tag::sse_> a00,a10; native<typename meta::scalar_of<A1>::type,tag::sse_> a01,a11; a00 = _mm256_extractf128_ps(a0,0); a10 = _mm256_extractf128_ps(a0,1); a01 = _mm256_extractf128_ps(a1,0); a11 = _mm256_extractf128_ps(a1,1); r0 = f(a00 , a01 ); r1 = f(a10 , a11 ); that = _mm256_insertf128_ps (that(),r0(),0); that = _mm256_insertf128_ps (that(),r1(),1); return that; } }; } } } namespace boost { namespace simd { namespace ext { BOOST_SIMD_FUNCTOR_IMPLEMENTATION ( map_, boost::simd::tag::avx_ , (Func)(A0) (A1) (A2) , (unspecified_<Func>) ((simd_< single_ <A0>, boost::simd::tag::avx_ >)) ((simd_< single_ <A1>, boost::simd::tag::avx_ >)) ((simd_< single_ <A2>, boost::simd::tag::avx_ >)) ) { typedef typename dispatch::meta:: result_of< Func const( simd::native<typename meta::scalar_of<A0>::type, tag::sse_> , simd::native<typename meta::scalar_of<A1>::type, tag::sse_> , simd::native<typename meta::scalar_of<A2>::type, tag::sse_> )>::type base; typedef simd::native< typename meta::scalar_of<base>::type , boost::simd::tag::avx_> result_type; inline result_type operator()( Func const& f , BOOST_PP_ENUM_BINARY_PARAMS( 3, A, const& a) ) const { base r0,r1; result_type that; native<typename meta::scalar_of<A0>::type,tag::sse_> a00,a10; native<typename meta::scalar_of<A1>::type,tag::sse_> a01,a11; native<typename meta::scalar_of<A2>::type,tag::sse_> a02,a12; a00 = _mm256_extractf128_ps(a0,0); a10 = _mm256_extractf128_ps(a0,1); a01 = _mm256_extractf128_ps(a1,0); a11 = _mm256_extractf128_ps(a1,1); a02 = _mm256_extractf128_ps(a2,0); a12 = _mm256_extractf128_ps(a2,1); r0 = f(a00 , a01 , a02 ); r1 = f(a10 , a11 , a12 ); that = _mm256_insertf128_ps (that(),r0(),0); that = _mm256_insertf128_ps (that(),r1(),1); return that; } }; } } } namespace boost { namespace simd { namespace ext { BOOST_SIMD_FUNCTOR_IMPLEMENTATION ( map_, boost::simd::tag::avx_ , (Func)(A0) (A1) (A2) (A3) , (unspecified_<Func>) ((simd_< single_ <A0>, boost::simd::tag::avx_ >)) ((simd_< single_ <A1>, boost::simd::tag::avx_ >)) ((simd_< single_ <A2>, boost::simd::tag::avx_ >)) ((simd_< single_ <A3>, boost::simd::tag::avx_ >)) ) { typedef typename dispatch::meta:: result_of< Func const( simd::native<typename meta::scalar_of<A0>::type, tag::sse_> , simd::native<typename meta::scalar_of<A1>::type, tag::sse_> , simd::native<typename meta::scalar_of<A2>::type, tag::sse_> , simd::native<typename meta::scalar_of<A3>::type, tag::sse_> )>::type base; typedef simd::native< typename meta::scalar_of<base>::type , boost::simd::tag::avx_> result_type; inline result_type operator()( Func const& f , BOOST_PP_ENUM_BINARY_PARAMS( 4, A, const& a) ) const { base r0,r1; result_type that; native<typename meta::scalar_of<A0>::type,tag::sse_> a00,a10; native<typename meta::scalar_of<A1>::type,tag::sse_> a01,a11; native<typename meta::scalar_of<A2>::type,tag::sse_> a02,a12; native<typename meta::scalar_of<A3>::type,tag::sse_> a03,a13; a00 = _mm256_extractf128_ps(a0,0); a10 = _mm256_extractf128_ps(a0,1); a01 = _mm256_extractf128_ps(a1,0); a11 = _mm256_extractf128_ps(a1,1); a02 = _mm256_extractf128_ps(a2,0); a12 = _mm256_extractf128_ps(a2,1); a03 = _mm256_extractf128_ps(a3,0); a13 = _mm256_extractf128_ps(a3,1); r0 = f(a00 , a01 , a02 , a03 ); r1 = f(a10 , a11 , a12 , a13 ); that = _mm256_insertf128_ps (that(),r0(),0); that = _mm256_insertf128_ps (that(),r1(),1); return that; } }; } } } namespace boost { namespace simd { namespace ext { BOOST_SIMD_FUNCTOR_IMPLEMENTATION ( map_, boost::simd::tag::avx_ , (Func)(A0) (A1) (A2) (A3) (A4) , (unspecified_<Func>) ((simd_< single_ <A0>, boost::simd::tag::avx_ >)) ((simd_< single_ <A1>, boost::simd::tag::avx_ >)) ((simd_< single_ <A2>, boost::simd::tag::avx_ >)) ((simd_< single_ <A3>, boost::simd::tag::avx_ >)) ((simd_< single_ <A4>, boost::simd::tag::avx_ >)) ) { typedef typename dispatch::meta:: result_of< Func const( simd::native<typename meta::scalar_of<A0>::type, tag::sse_> , simd::native<typename meta::scalar_of<A1>::type, tag::sse_> , simd::native<typename meta::scalar_of<A2>::type, tag::sse_> , simd::native<typename meta::scalar_of<A3>::type, tag::sse_> , simd::native<typename meta::scalar_of<A4>::type, tag::sse_> )>::type base; typedef simd::native< typename meta::scalar_of<base>::type , boost::simd::tag::avx_> result_type; inline result_type operator()( Func const& f , BOOST_PP_ENUM_BINARY_PARAMS( 5, A, const& a) ) const { base r0,r1; result_type that; native<typename meta::scalar_of<A0>::type,tag::sse_> a00,a10; native<typename meta::scalar_of<A1>::type,tag::sse_> a01,a11; native<typename meta::scalar_of<A2>::type,tag::sse_> a02,a12; native<typename meta::scalar_of<A3>::type,tag::sse_> a03,a13; native<typename meta::scalar_of<A4>::type,tag::sse_> a04,a14; a00 = _mm256_extractf128_ps(a0,0); a10 = _mm256_extractf128_ps(a0,1); a01 = _mm256_extractf128_ps(a1,0); a11 = _mm256_extractf128_ps(a1,1); a02 = _mm256_extractf128_ps(a2,0); a12 = _mm256_extractf128_ps(a2,1); a03 = _mm256_extractf128_ps(a3,0); a13 = _mm256_extractf128_ps(a3,1); a04 = _mm256_extractf128_ps(a4,0); a14 = _mm256_extractf128_ps(a4,1); r0 = f(a00 , a01 , a02 , a03 , a04 ); r1 = f(a10 , a11 , a12 , a13 , a14 ); that = _mm256_insertf128_ps (that(),r0(),0); that = _mm256_insertf128_ps (that(),r1(),1); return that; } }; } } } namespace boost { namespace simd { namespace ext { BOOST_SIMD_FUNCTOR_IMPLEMENTATION ( map_, boost::simd::tag::avx_ , (Func)(A0) (A1) (A2) (A3) (A4) (A5) , (unspecified_<Func>) ((simd_< single_ <A0>, boost::simd::tag::avx_ >)) ((simd_< single_ <A1>, boost::simd::tag::avx_ >)) ((simd_< single_ <A2>, boost::simd::tag::avx_ >)) ((simd_< single_ <A3>, boost::simd::tag::avx_ >)) ((simd_< single_ <A4>, boost::simd::tag::avx_ >)) ((simd_< single_ <A5>, boost::simd::tag::avx_ >)) ) { typedef typename dispatch::meta:: result_of< Func const( simd::native<typename meta::scalar_of<A0>::type, tag::sse_> , simd::native<typename meta::scalar_of<A1>::type, tag::sse_> , simd::native<typename meta::scalar_of<A2>::type, tag::sse_> , simd::native<typename meta::scalar_of<A3>::type, tag::sse_> , simd::native<typename meta::scalar_of<A4>::type, tag::sse_> , simd::native<typename meta::scalar_of<A5>::type, tag::sse_> )>::type base; typedef simd::native< typename meta::scalar_of<base>::type , boost::simd::tag::avx_> result_type; inline result_type operator()( Func const& f , BOOST_PP_ENUM_BINARY_PARAMS( 6, A, const& a) ) const { base r0,r1; result_type that; native<typename meta::scalar_of<A0>::type,tag::sse_> a00,a10; native<typename meta::scalar_of<A1>::type,tag::sse_> a01,a11; native<typename meta::scalar_of<A2>::type,tag::sse_> a02,a12; native<typename meta::scalar_of<A3>::type,tag::sse_> a03,a13; native<typename meta::scalar_of<A4>::type,tag::sse_> a04,a14; native<typename meta::scalar_of<A5>::type,tag::sse_> a05,a15; a00 = _mm256_extractf128_ps(a0,0); a10 = _mm256_extractf128_ps(a0,1); a01 = _mm256_extractf128_ps(a1,0); a11 = _mm256_extractf128_ps(a1,1); a02 = _mm256_extractf128_ps(a2,0); a12 = _mm256_extractf128_ps(a2,1); a03 = _mm256_extractf128_ps(a3,0); a13 = _mm256_extractf128_ps(a3,1); a04 = _mm256_extractf128_ps(a4,0); a14 = _mm256_extractf128_ps(a4,1); a05 = _mm256_extractf128_ps(a5,0); a15 = _mm256_extractf128_ps(a5,1); r0 = f(a00 , a01 , a02 , a03 , a04 , a05 ); r1 = f(a10 , a11 , a12 , a13 , a14 , a15 ); that = _mm256_insertf128_ps (that(),r0(),0); that = _mm256_insertf128_ps (that(),r1(),1); return that; } }; } } }
namespace boost { namespace simd { namespace ext { BOOST_SIMD_FUNCTOR_IMPLEMENTATION ( map_, boost::simd::tag::avx_ , (Func)(A0) , (unspecified_<Func>) ((simd_< integer_ <A0>, boost::simd::tag::avx_ >)) ) { typedef typename dispatch::meta:: result_of< Func const( simd::native<typename meta::scalar_of<A0>::type, tag::sse_> )>::type base; typedef simd::native< typename meta::scalar_of<base>::type , boost::simd::tag::avx_> result_type; inline result_type operator()( Func const& f , BOOST_PP_ENUM_BINARY_PARAMS( 1, A, const& a) ) const { base r0,r1; result_type that; native<typename meta::scalar_of<A0>::type,tag::sse_> a00,a10; a00 = _mm256_extractf128_si256(a0,0); a10 = _mm256_extractf128_si256(a0,1); r0 = f(a00 ); r1 = f(a10 ); that = _mm256_insertf128_si256 (that(),r0(),0); that = _mm256_insertf128_si256 (that(),r1(),1); return that; } }; } } } namespace boost { namespace simd { namespace ext { BOOST_SIMD_FUNCTOR_IMPLEMENTATION ( map_, boost::simd::tag::avx_ , (Func)(A0) (A1) , (unspecified_<Func>) ((simd_< integer_ <A0>, boost::simd::tag::avx_ >)) ((simd_< integer_ <A1>, boost::simd::tag::avx_ >)) ) { typedef typename dispatch::meta:: result_of< Func const( simd::native<typename meta::scalar_of<A0>::type, tag::sse_> , simd::native<typename meta::scalar_of<A1>::type, tag::sse_> )>::type base; typedef simd::native< typename meta::scalar_of<base>::type , boost::simd::tag::avx_> result_type; inline result_type operator()( Func const& f , BOOST_PP_ENUM_BINARY_PARAMS( 2, A, const& a) ) const { base r0,r1; result_type that; native<typename meta::scalar_of<A0>::type,tag::sse_> a00,a10; native<typename meta::scalar_of<A1>::type,tag::sse_> a01,a11; a00 = _mm256_extractf128_si256(a0,0); a10 = _mm256_extractf128_si256(a0,1); a01 = _mm256_extractf128_si256(a1,0); a11 = _mm256_extractf128_si256(a1,1); r0 = f(a00 , a01 ); r1 = f(a10 , a11 ); that = _mm256_insertf128_si256 (that(),r0(),0); that = _mm256_insertf128_si256 (that(),r1(),1); return that; } }; } } } namespace boost { namespace simd { namespace ext { BOOST_SIMD_FUNCTOR_IMPLEMENTATION ( map_, boost::simd::tag::avx_ , (Func)(A0) (A1) (A2) , (unspecified_<Func>) ((simd_< integer_ <A0>, boost::simd::tag::avx_ >)) ((simd_< integer_ <A1>, boost::simd::tag::avx_ >)) ((simd_< integer_ <A2>, boost::simd::tag::avx_ >)) ) { typedef typename dispatch::meta:: result_of< Func const( simd::native<typename meta::scalar_of<A0>::type, tag::sse_> , simd::native<typename meta::scalar_of<A1>::type, tag::sse_> , simd::native<typename meta::scalar_of<A2>::type, tag::sse_> )>::type base; typedef simd::native< typename meta::scalar_of<base>::type , boost::simd::tag::avx_> result_type; inline result_type operator()( Func const& f , BOOST_PP_ENUM_BINARY_PARAMS( 3, A, const& a) ) const { base r0,r1; result_type that; native<typename meta::scalar_of<A0>::type,tag::sse_> a00,a10; native<typename meta::scalar_of<A1>::type,tag::sse_> a01,a11; native<typename meta::scalar_of<A2>::type,tag::sse_> a02,a12; a00 = _mm256_extractf128_si256(a0,0); a10 = _mm256_extractf128_si256(a0,1); a01 = _mm256_extractf128_si256(a1,0); a11 = _mm256_extractf128_si256(a1,1); a02 = _mm256_extractf128_si256(a2,0); a12 = _mm256_extractf128_si256(a2,1); r0 = f(a00 , a01 , a02 ); r1 = f(a10 , a11 , a12 ); that = _mm256_insertf128_si256 (that(),r0(),0); that = _mm256_insertf128_si256 (that(),r1(),1); return that; } }; } } } namespace boost { namespace simd { namespace ext { BOOST_SIMD_FUNCTOR_IMPLEMENTATION ( map_, boost::simd::tag::avx_ , (Func)(A0) (A1) (A2) (A3) , (unspecified_<Func>) ((simd_< integer_ <A0>, boost::simd::tag::avx_ >)) ((simd_< integer_ <A1>, boost::simd::tag::avx_ >)) ((simd_< integer_ <A2>, boost::simd::tag::avx_ >)) ((simd_< integer_ <A3>, boost::simd::tag::avx_ >)) ) { typedef typename dispatch::meta:: result_of< Func const( simd::native<typename meta::scalar_of<A0>::type, tag::sse_> , simd::native<typename meta::scalar_of<A1>::type, tag::sse_> , simd::native<typename meta::scalar_of<A2>::type, tag::sse_> , simd::native<typename meta::scalar_of<A3>::type, tag::sse_> )>::type base; typedef simd::native< typename meta::scalar_of<base>::type , boost::simd::tag::avx_> result_type; inline result_type operator()( Func const& f , BOOST_PP_ENUM_BINARY_PARAMS( 4, A, const& a) ) const { base r0,r1; result_type that; native<typename meta::scalar_of<A0>::type,tag::sse_> a00,a10; native<typename meta::scalar_of<A1>::type,tag::sse_> a01,a11; native<typename meta::scalar_of<A2>::type,tag::sse_> a02,a12; native<typename meta::scalar_of<A3>::type,tag::sse_> a03,a13; a00 = _mm256_extractf128_si256(a0,0); a10 = _mm256_extractf128_si256(a0,1); a01 = _mm256_extractf128_si256(a1,0); a11 = _mm256_extractf128_si256(a1,1); a02 = _mm256_extractf128_si256(a2,0); a12 = _mm256_extractf128_si256(a2,1); a03 = _mm256_extractf128_si256(a3,0); a13 = _mm256_extractf128_si256(a3,1); r0 = f(a00 , a01 , a02 , a03 ); r1 = f(a10 , a11 , a12 , a13 ); that = _mm256_insertf128_si256 (that(),r0(),0); that = _mm256_insertf128_si256 (that(),r1(),1); return that; } }; } } } namespace boost { namespace simd { namespace ext { BOOST_SIMD_FUNCTOR_IMPLEMENTATION ( map_, boost::simd::tag::avx_ , (Func)(A0) (A1) (A2) (A3) (A4) , (unspecified_<Func>) ((simd_< integer_ <A0>, boost::simd::tag::avx_ >)) ((simd_< integer_ <A1>, boost::simd::tag::avx_ >)) ((simd_< integer_ <A2>, boost::simd::tag::avx_ >)) ((simd_< integer_ <A3>, boost::simd::tag::avx_ >)) ((simd_< integer_ <A4>, boost::simd::tag::avx_ >)) ) { typedef typename dispatch::meta:: result_of< Func const( simd::native<typename meta::scalar_of<A0>::type, tag::sse_> , simd::native<typename meta::scalar_of<A1>::type, tag::sse_> , simd::native<typename meta::scalar_of<A2>::type, tag::sse_> , simd::native<typename meta::scalar_of<A3>::type, tag::sse_> , simd::native<typename meta::scalar_of<A4>::type, tag::sse_> )>::type base; typedef simd::native< typename meta::scalar_of<base>::type , boost::simd::tag::avx_> result_type; inline result_type operator()( Func const& f , BOOST_PP_ENUM_BINARY_PARAMS( 5, A, const& a) ) const { base r0,r1; result_type that; native<typename meta::scalar_of<A0>::type,tag::sse_> a00,a10; native<typename meta::scalar_of<A1>::type,tag::sse_> a01,a11; native<typename meta::scalar_of<A2>::type,tag::sse_> a02,a12; native<typename meta::scalar_of<A3>::type,tag::sse_> a03,a13; native<typename meta::scalar_of<A4>::type,tag::sse_> a04,a14; a00 = _mm256_extractf128_si256(a0,0); a10 = _mm256_extractf128_si256(a0,1); a01 = _mm256_extractf128_si256(a1,0); a11 = _mm256_extractf128_si256(a1,1); a02 = _mm256_extractf128_si256(a2,0); a12 = _mm256_extractf128_si256(a2,1); a03 = _mm256_extractf128_si256(a3,0); a13 = _mm256_extractf128_si256(a3,1); a04 = _mm256_extractf128_si256(a4,0); a14 = _mm256_extractf128_si256(a4,1); r0 = f(a00 , a01 , a02 , a03 , a04 ); r1 = f(a10 , a11 , a12 , a13 , a14 ); that = _mm256_insertf128_si256 (that(),r0(),0); that = _mm256_insertf128_si256 (that(),r1(),1); return that; } }; } } } namespace boost { namespace simd { namespace ext { BOOST_SIMD_FUNCTOR_IMPLEMENTATION ( map_, boost::simd::tag::avx_ , (Func)(A0) (A1) (A2) (A3) (A4) (A5) , (unspecified_<Func>) ((simd_< integer_ <A0>, boost::simd::tag::avx_ >)) ((simd_< integer_ <A1>, boost::simd::tag::avx_ >)) ((simd_< integer_ <A2>, boost::simd::tag::avx_ >)) ((simd_< integer_ <A3>, boost::simd::tag::avx_ >)) ((simd_< integer_ <A4>, boost::simd::tag::avx_ >)) ((simd_< integer_ <A5>, boost::simd::tag::avx_ >)) ) { typedef typename dispatch::meta:: result_of< Func const( simd::native<typename meta::scalar_of<A0>::type, tag::sse_> , simd::native<typename meta::scalar_of<A1>::type, tag::sse_> , simd::native<typename meta::scalar_of<A2>::type, tag::sse_> , simd::native<typename meta::scalar_of<A3>::type, tag::sse_> , simd::native<typename meta::scalar_of<A4>::type, tag::sse_> , simd::native<typename meta::scalar_of<A5>::type, tag::sse_> )>::type base; typedef simd::native< typename meta::scalar_of<base>::type , boost::simd::tag::avx_> result_type; inline result_type operator()( Func const& f , BOOST_PP_ENUM_BINARY_PARAMS( 6, A, const& a) ) const { base r0,r1; result_type that; native<typename meta::scalar_of<A0>::type,tag::sse_> a00,a10; native<typename meta::scalar_of<A1>::type,tag::sse_> a01,a11; native<typename meta::scalar_of<A2>::type,tag::sse_> a02,a12; native<typename meta::scalar_of<A3>::type,tag::sse_> a03,a13; native<typename meta::scalar_of<A4>::type,tag::sse_> a04,a14; native<typename meta::scalar_of<A5>::type,tag::sse_> a05,a15; a00 = _mm256_extractf128_si256(a0,0); a10 = _mm256_extractf128_si256(a0,1); a01 = _mm256_extractf128_si256(a1,0); a11 = _mm256_extractf128_si256(a1,1); a02 = _mm256_extractf128_si256(a2,0); a12 = _mm256_extractf128_si256(a2,1); a03 = _mm256_extractf128_si256(a3,0); a13 = _mm256_extractf128_si256(a3,1); a04 = _mm256_extractf128_si256(a4,0); a14 = _mm256_extractf128_si256(a4,1); a05 = _mm256_extractf128_si256(a5,0); a15 = _mm256_extractf128_si256(a5,1); r0 = f(a00 , a01 , a02 , a03 , a04 , a05 ); r1 = f(a10 , a11 , a12 , a13 , a14 , a15 ); that = _mm256_insertf128_si256 (that(),r0(),0); that = _mm256_insertf128_si256 (that(),r1(),1); return that; } }; } } }
